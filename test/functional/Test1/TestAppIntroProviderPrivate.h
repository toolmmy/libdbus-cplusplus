
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__TestAppIntroProviderPrivate_h__ADAPTOR_MARSHAL_H
#define __dbusxx__TestAppIntroProviderPrivate_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace DBusCpp {
namespace Test {
namespace Com {

class Intro_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Intro_adaptor()
    : ::DBus::InterfaceAdaptor("DBusCpp.Test.Com.Intro")
    {
        register_method(Intro_adaptor, test1, _test1_stub);
        register_method(Intro_adaptor, testByte, _testByte_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument test1_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument testByte_args[] = 
        {
            { "Byte", "y", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument test1Result_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument testByteResult_args[] = 
        {
            { "Byte", "y", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Intro_adaptor_methods[] = 
        {
            { "test1", test1_args },
            { "testByte", testByte_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Intro_adaptor_signals[] = 
        {
            { "test1Result", test1Result_args },
            { "testByteResult", testByteResult_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Intro_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Intro_adaptor_interface = 
        {
            "DBusCpp.Test.Com.Intro",
            Intro_adaptor_methods,
            Intro_adaptor_signals,
            Intro_adaptor_properties
        };
        return &Intro_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual void test1() = 0;
    virtual void testByte(const uint8_t& Byte) = 0;

public:

    /* signal emitters for this interface
     */
    void test1Result()
    {
        ::DBus::SignalMessage sig("test1Result");
        emit_signal(sig);
    }
    void testByteResult(const uint8_t& arg1)
    {
        ::DBus::SignalMessage sig("testByteResult");
        ::DBus::MessageIter wi = sig.writer();
        wi << arg1;
        emit_signal(sig);
    }

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _test1_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        test1();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _testByte_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        uint8_t argin1; ri >> argin1;
        testByte(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } } 
#endif //__dbusxx__TestAppIntroProviderPrivate_h__ADAPTOR_MARSHAL_H
