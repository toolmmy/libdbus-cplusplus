
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__TestAppIntroPrivate_h__PROXY_MARSHAL_H
#define __dbusxx__TestAppIntroPrivate_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace DBusCpp {
namespace Test {
namespace Com {

class Intro_proxy
: public ::DBus::InterfaceProxy
{
public:

    Intro_proxy()
    : ::DBus::InterfaceProxy("DBusCpp.Test.Com.Intro")
    {
        connect_signal(Intro_proxy, test1Result, _test1Result_stub);
        connect_signal(Intro_proxy, testByteResult, _testByteResult_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void test1()
    {
        ::DBus::CallMessage call;
        call.member("test1");
        assert (invoke_method_noreply (call));
    }

    void testByte(const uint8_t& Byte)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << Byte;
        call.member("testByte");
        assert (invoke_method_noreply (call));
    }


public:

    /* signal handlers for this interface
     */
    virtual void test1Result() = 0;
    virtual void testByteResult(const uint8_t& Byte) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _test1Result_stub(const ::DBus::SignalMessage &sig)
    {
        test1Result();
    }
    void _testByteResult_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        uint8_t Byte;
        ri >> Byte;
        testByteResult(Byte);
    }
};

} } } 
#endif //__dbusxx__TestAppIntroPrivate_h__PROXY_MARSHAL_H
