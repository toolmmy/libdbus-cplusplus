
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__unixfd_server_h__ADAPTOR_MARSHAL_H
#define __dbusxx__unixfd_server_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace DBus {

class UnixChannelDemo_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    UnixChannelDemo_adaptor()
    : ::DBus::InterfaceAdaptor("org.freedesktop.DBus.UnixChannelDemo")
    {
        register_method(UnixChannelDemo_adaptor, Aquire, _Aquire_stub);
        register_method(UnixChannelDemo_adaptor, Release, _Release_stub);
        register_method(UnixChannelDemo_adaptor, GetProperties, _GetProperties_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Aquire_args[] = 
        {
            { "fd", "h", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Release_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument GetProperties_args[] = 
        {
            { "properties", "a{ss}", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod UnixChannelDemo_adaptor_methods[] = 
        {
            { "Aquire", Aquire_args },
            { "Release", Release_args },
            { "GetProperties", GetProperties_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod UnixChannelDemo_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty UnixChannelDemo_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface UnixChannelDemo_adaptor_interface = 
        {
            "org.freedesktop.DBus.UnixChannelDemo",
            UnixChannelDemo_adaptor_methods,
            UnixChannelDemo_adaptor_signals,
            UnixChannelDemo_adaptor_properties
        };
        return &UnixChannelDemo_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual ::DBus::UnixFd Aquire() = 0;
    virtual void Release() = 0;
    virtual std::map< std::string, std::string > GetProperties() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Aquire_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        ::DBus::UnixFd argout1 = Aquire();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Release_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        Release();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _GetProperties_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::map< std::string, std::string > argout1 = GetProperties();
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
};

} } } 
#endif //__dbusxx__unixfd_server_h__ADAPTOR_MARSHAL_H
